#! /usr/bin/bash
source checkName
source DMLFunc
create_table() {

    DBName="$1"
    oneFlag=0
    tables=$( ls Database/$DBName | grep -v "_metaData")

    while true; do
            read -p "Enter the name of the table: " TableName
            modifiedTableName=$(check_name "$TableName")
            if [[ "$modifiedTableName" != "1" ]]; then
                if [[ ! -e Database/$DBName/$modifiedTableName ]]; then
                    touch "Database/$DBName/$modifiedTableName"
                    touch "Database/$DBName/${modifiedTableName}_metaData"
                    break
                else
                    echo the table already exist
                fi
            else
              echo "Invalid table name."
 	    fi
    done


    while true; do
            #read -p "Enter the number of fields: " NumFields
            read -p "Enter the number of fields: " oo
            test=$(check_is_int "$oo")

            if [[ "$test" != "1" ]];then
                break
            else
                echo "Invalid NumFields."
            fi

    done

    for ((i = 1; i <= $oo; i++)); do

            while true; do
                read -p "Enter the name of field $i: " FieldName
                modifiedFieldName=$(check_name "$FieldName")
                if [[ "$modifiedFieldName" != "1" ]];then
                    printf "$modifiedFieldName:" >> "Database/$DBName/${modifiedTableName}_metaData"
                     break
                else
                  echo "Invalid Column Name."
                fi
             done

            while true; do
                read -p "Enter the datatype of field $i (string/int): " DataType
                checkDataType=$(check_dataType "$DataType")
                if [[ "$checkDataType" != "1" ]];then
                    re=$(echo "$DataType" | tr '[:upper:]' '[:lower:]')
                    printf "$re:" >> "Database/$DBName/${modifiedTableName}_metaData" 
                    break
                else
                    echo "Invalid Datatype."
                 fi
             done  

            if [[ $oneFlag == 0 ]];then
                 while true;do
                     read -p "Is field $i a primary key? (y/n): " IsPrimaryKey
                     modifiedYesNo=$(check_yesNo "$IsPrimaryKey")
                    if [[ "$modifiedYesNo" != "1" ]]; then 
                         if [ "$modifiedYesNo" == "y" ]; then
                            printf "pk ">> "Database/$DBName/${modifiedTableName}_metaData"
                            oneFlag=1
                            break
                        else 
                             break
                         fi     
                    
                    else
                          echo "Invalid response."
                     fi
                done
            fi
        printf "\n">> "Database/$DBName/${modifiedTableName}_metaData"
    done


    echo "Table $modifiedTableName created successfully in $DBName database."
}
list_tables() {
  DBName="$1"
  ls Database/$DBName | grep -v "_metaData"
} 
drop_table(){
    DBName="$1"
    read -p "Enter the name of the table: " TableName
    tables=$( ls Database/$DBName | grep -v "_metaData")
    for file in $tables;do
        if [ "$TableName" == "$file" ];then
            rm Database/$DBName/$TableName 
            rm "Database/$DBName/${TableName}_metaData"
            echo "Table $TableName droped successfully in $DBName database."
            break
        else
        echo "Table $TableName not exist"
        break
        fi
    done
}

select_table() {
	DBName=$1
	printf "Enter table name: \n"
	read tablename
	if [[ -e Database/$DBName/$tablename ]];then
		clear
		printf "Connected to "$tablename"...\n"
		while true
		do
			disconnecttable=false
			select choice in "Select from Table" "Insert into Table" "Update Table" "Delete from Table" "Disconnect Table"
			do
				case $choice in
					"Select from Table")
						##
						select_from_table "Database/$DBName" $tablename
						break
						;;
					"Insert into Table")
						insert_into_table $DBName $tablename
						break
						;;
					"Update Table")
						##
						update_table "Database/$DBName" $tablename
						break
						;;
					"Delete from Table")
						deleteTable $DBName $tablename
						break
						;;
					"Disconnect Table")
						disconnecttable=true
						clear
                        			printf "Disconnecting from "$tablename"...\n"
						break
						;;
					*)
						echo $REPLY is not one of the choices.
				esac
			done
			if [[ $disconnecttable == "true" ]];then
				break
			fi
		done
	else
		echo "This table does not exist."
	fi	
}

