#! /usr/bin/bash
source checkName
check_column_exist() {
	#metadata=$1
	IFS=$OIFS
	declare -a existingnames=($(cat $metadatafile | awk -F: '{print $1}'))
	
	columnname=$1
	for name in ${existingnames[@]}
	do
		if [[ $name == $columnname ]];then
			IFS=$OIFS
			return "1"
		fi
	done
	
	IFS=$OIFS
	return "0"
}
valid_statements() {
	declare -a allstatements=($@)
	
	for statement in ${allstatements[@]}
	do
		IFS="="
		declare -a states=($statement)
		columnname=${states[0]}
		check_column_exist $columnname
		colexists=$?
		if [[ $colexists != "1" ]];then
			return "0"
		fi
	done
	return "1"
}
get_cond_number() {
	IFS="="
	declare -a states=($1)
	columnname=${states[0]}
	IFS=$OIFS
	declare -i pos=0
	declare -a existingnames=($(cat $metadatafile | awk -F: '{print $1}'))
	for name in ${existingnames[@]}
	do
		if [[ $name == $columnname ]];then
			echo $pos
		fi
		pos=$pos+1
	done
}

get_col_numbers() {
	declare -a allstatements=($@)
	for statement in ${allstatements[@]}
	do
		IFS="="
		declare -a states=($statement)
		columnname=${states[0]}
		IFS=$OIFS
		declare -i pos=0
		declare -a existingnames=($(cat $metadatafile | awk -F: '{print $1}'))
		for name in ${existingnames[@]}
		do
			if [[ $name == $columnname ]];then
				echo $pos
			fi
			pos=$pos+1
		done
	done
}
get_update_values() {
	declare -a allstatements=($@)
	for statement in ${allstatements[@]}
	do
		IFS="="
		declare -a values=($statement)
		IFS=$OIFS
		echo ${values[1]}
	done
}
get_cond_value() {
	IFS="="
	declare -a states=($1)
	echo ${states[1]}
	IFS=$OIFS
}

update_table() {
	OIFS=$IFS
	selecteddb=$1
	tablefile=$selecteddb/$2
	metadatafile=$1/$2"_metaData"
	metadataraw=$(cat $metadatafile)
	dataraw=$(cat $tablefile)
	echo $dataraw
	echo "Existing columns:"
	for i in ${metadataraw[@]}
	do
		echo $i | awk -F: '{print $1"("$2")";}'
	done
	
	echo "Please enter the condition (eg. id=5)"
	read condition
	condition=$(echo -e "${condition}" | tr -d '[:space:]')
	
	IFS="="
	declare -a conditionElements=($condition)
	IFS=$OIFS
	check_column_exist ${conditionElements[0]}
	validcond=$?
	if (( ${#conditionElements[@]} != 2 || $validcond != "1" ));then
		echo "Invalid condition."
		return
	fi
	echo "Enter the columns you wish to change seperated by comas, and their new values"
	echo "Example: (col=newValue, col2=newValue2...)"
	read updateinput
	updateinput=$(echo -e "${updateinput}" | tr -d '[:space:]')
	IFS=","
	declare -a updates=($updateinput)
	IFS=$OIFS
	valid_statements ${updates[@]}
	validupdate=$?
	IFS=$OIFS
	if [[ $validupdate == "1" ]];then
		echo "Update is valid"
		declare -a numbermapping=$(get_col_numbers ${updates[@]})
		declare -a valuemapping=$(get_update_values ${updates[@]})
		condfield=$(get_cond_number $condition)
		condvalue=$(get_cond_value $condition)
		#echo ${numbermapping[@]}
		#echo ${valuemapping[@]}
		#echo $condvalue
		#return
		awk -F: -v numberplain="${numbermapping[@]}" -v condnum="$condfield" -v valueplain="${valuemapping[@]}" -v condval="$condvalue"\
		'BEGIN{split(numberplain,numMap,"\n");split(valueplain,valMap,"\n"); for (i in numMap) ++numMap[i]; ++condnum;} \
		{row="";ptr=1; \
		if($condnum == condval){\
			for(i=1;i<=NF;i++){\
				
			 	if(i == numMap[ptr]){\
			 		if(row == "") {row=valMap[ptr++];}\
			 		else{row=row":"valMap[ptr++];}\
			 	}\
			  	else {
			  		if(row == "") {row=$i;}\
			 		else{row=row":"$i;}\
			 	}\
			 } \
			 print row;
		 } \
		 else {\
		 	print $0;\
		 }
		 
		 }' $tablefile > $selecteddb/newData
		#for (i=1;i<=NF;i++)
		#print "Current value: "valMap[numMap[ptr]]" , ptr = "ptr;
	else
		echo "Update is not valid"
	fi
}


insert_into_table(){
    DBName="$1" 
    TableName="$2"
    numOfFields=$(awk -F: '{print NF; exit}' "Database/$DBName/${TableName}_metaData")
    Name=($(awk -F: '{print $1}' "Database/$DBName/${TableName}_metaData"))
    DataType=($(awk -F: '{print $2}' "Database/$DBName/${TableName}_metaData"))
    PK=($(awk -F: '{print ($3 == "" ? "x" : $3)}' "Database/$DBName/${TableName}_metaData"))

   for ((i=0; i<$numOfFields; i++)); 
    do

            read -p "Enter the ${Name[$i]} " FieldName
            if [[ ${DataType[$i]} == "int" ]];then 
                checkValue=$(check_is_int $FieldName)
                if [[ $checkValue == 1 ]];then
                 ((i--))
                continue
                fi
            fi
            if [[ ${PK[$i]} != "pk" ]]; then

                if [[ $i == 0 ]]; then
                   echo -n "$FieldName" >> "Database/$DBName/${TableName}"
                else 
                   echo -n ":$FieldName" >> "Database/$DBName/${TableName}"
                fi

            else

                flag=0
                values=($(awk -F: -v col=$((i+1)) '{print $col}' "Database/$DBName/$TableName"))

                for ((x=0; x<${#values[@]}; x++)); do

                    if (( $FieldName == ${values[$x]} )); then
                        flag=1

                    fi

                done
                if [[ $flag == 1 ]];then

                    echo "OOP! can't repeat this values for ${Name[$i]} is unique"
                    ((i--))

                else

                    if [[ $i == 0 ]]; then
                        echo -n "$FieldName" >> "Database/$DBName/${TableName}"
                    else 
                        echo -n ":$FieldName" >> "Database/$DBName/${TableName}"
                    fi

                fi
            fi

    done
     printf "\n" >> "Database/$DBName/${TableName}"



}

deleteTable(){
    DBNameD="$1" 
    TableNameD="$2"

    select choice in "Delete All Data" "Delete by column" "Delete specific column" "Delete multiple column by name"
			do
				case $choice in
					"Delete All Data")
                        awk  '{next;}' "Database/$DBName/${TableName}" >"Database/$DBName/${TableName}" 
						break
						;;

					"Delete by column")
                        flagExist=0
                        flagDisplayErrorMessage=0
                        while [[ "$flagExist" == 0 ]];do 
                            if [[ "$flagDisplayErrorMessage" == 1 ]];then 
                                echo "Column Not Exist Try Again"
                            fi
                            read -p "Enter the condition to delete(coulmnName  specific value): " columnName  value
                            FieldNum=$(return_num_of_Field  $columnName  $DBNameD $TableNameD)
                            
                            Name1=($(awk -F: '{print $1}' "Database/$DBNameD/${TableNameD}_metaData"))
                            for ((l=0; l<${#Name1[@]}; l++)); do
                                echo $columnName
                                echo ${Name1[$l]}
                                if [[ $columnName == ${Name1[$l]} ]];then
                                    flagExist=1
                                    break
                                fi
                            done
                            echo "the flage test $flagExist"
                            echo $FieldNum
                            echo $value
                            if [[ "$flagExist" == 1 ]];then 
                                awk -F: -v fNum="$FieldNum" -v valuetest="$value" '{if($fNum == valuetest){next;} {print} }' "Database/$DBNameD/$TableNameD" > "Database/$DBNameD/${TableNameD}_temp"
                                mv "Database/$DBNameD/${TableNameD}_temp" "Database/$DBNameD/$TableNameD"
                            else
                               flagDisplayErrorMessage=1
                            fi 
                        done

						break
						;;

                    "Delete specific column")

                        flagExist2=0
                        flagDisplayErrorMessage2=0
                        while [[ "$flagExist2" == 0 ]];do 
                            if [[ "$flagDisplayErrorMessage2" == 1 ]];then 
                                echo "Column Not Exist Try Again"
                            fi
                            read -p "Enter the name of column you want to delete it: " columnName 
                            FieldNum=$(return_num_of_Field  $columnName  $DBNameD $TableNameD)

                        
                            Name1=($(awk -F: '{print $1}' "Database/$DBNameD/${TableNameD}_metaData"))
                            for ((l=0; l<${#Name1[@]}; l++)); do

                                if [[ $columnName == ${Name1[$l]} ]];then
                                    flagExist2=1
                               
                                fi
                            done

                            if [[ "$flagExist2" == 1 ]];then 
                                awk -F: -v fNum="$FieldNum" '{ for(v=1;v<=NF;v++) { if(fNum==v) $fNum=""; if(v==NF && fNum!=v){$v=$v} else if(v!=NF && fNum!=v) $v=$v":" } print }' "Database/$DBNameD/$TableNameD" > "Database/$DBNameD/${TableNameD}_temp"
                                mv "Database/$DBNameD/${TableNameD}_temp" "Database/$DBNameD/$TableNameD"

                                #delete from table_metaData
                                awk -F: -v numRow="$FieldNum" 'NR != numRow' "Database/$DBNameD/${TableNameD}_metaData" > "Database/$DBNameD/${TableNameD}_temp"
                                mv "Database/$DBNameD/${TableNameD}_temp" "Database/$DBNameD/${TableNameD}_metaData"
                            else
                               flagDisplayErrorMessage2=1
                            fi 
                        done
						break
						;;
                    "Delete multiple column by name")

                        while true ; do
                            Name2=($(awk -F: '{print $1}' "Database/$DBNameD/${TableNameD}_metaData"))
                            echo ================
                            echo Exist Columns
                            echo ================
                            for ((l=0; l<${#Name2[@]}; l++)); do
                            echo ${Name2[$l]}
                            echo ====================
                            done
                            flagExist3=0
                            flagDisplayErrorMessage3=0
                            while [[ "$flagExist3" == 0 ]];do 
                                if [[ "$flagDisplayErrorMessage3" == 1 ]];then 
                                    echo "Column Not Exist Try Again"
                                fi
                                read -p "DO you need to delete coulmn enter (y) if yes: " reply
                                if [[ $reply == "y" ]];then 

                                    read -p "Enter the name of column you want to delete it:" coName 
  
                                        for ((value=0; value<${#Name2[@]}; value++)); do
                                            if [[ $coName == ${Name2[$value]} ]];then
                                                flagExist3=1
                                
                                            fi
                                        done

                                        if [[ "$flagExist3" != 1 ]];then 
                                             flagDisplayErrorMessage3=1
                                        else
                                        delete_multiple_Column $coName  $DBNameD $TableNameD

                                        fi 
                                 

                                else
                                   break
                                fi
                            done
                            if [[ $reply != "y" ]];then 
                                break
                            fi
                        done 
                        break
						;;
					*) 
						echo $REPLY is not one of the choices.
						break
						;;
				esac
			done
}
return_num_of_Field(){
    fieldtest=$1
    DBNameT=$2
    TableNameT=$3
    Name=($(awk -F: '{print $1}' "Database/$DBNameT/${TableNameT}_metaData"))
    for ((z=0; z<${#Name[@]}; z++)); do
        if [[ "$fieldtest" == "${Name[$z]}" ]]; then 
            echo $((z+1))
            break
        fi
    done
}
delete_multiple_Column(){
    cName="$1"
    DBNamex="$2"
    TableNamex="$3"

    FieldNum=$(return_num_of_Field "$cName" "$DBNamex" "$TableNamex")

    awk -F: -v fNum="$FieldNum" '{ for(v=1;v<=NF;v++) { if(fNum==v) $fNum=""; if(v==NF && fNum!=v){$v=$v} else if(v!=NF && fNum!=v) $v=$v":" } print }' "Database/$DBNamex/$TableNamex" > "Database/$DBNamex/${TableNamex}_temp"
    mv "Database/$DBNamex/${TableNamex}_temp" "Database/$DBNamex/$TableNamex"

    # delete from table_metaData
    awk -F: -v numRow="$FieldNum" 'NR != numRow' "Database/$DBNamex/${TableNamex}_metaData" > "Database/$DBNamex/${TableNamex}_temp"
    mv "Database/$DBNamex/${TableNamex}_temp" "Database/$DBNamex/${TableNamex}_metaData"


}
#deleteTable "MyDatabase" "kk"
#return_num_of_Field name  "MyDatabase" "kk"
